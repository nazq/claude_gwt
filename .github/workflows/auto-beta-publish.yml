name: Auto Beta Publish

on:
  push:
    branches:
      - master
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  publish-beta:
    name: Publish Beta Version
    runs-on: ubuntu-latest
    # Skip if:
    # - Commit message contains [skip ci]
    # - It's a version commit
    # - It's a release commit
    if: |
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'chore: version packages') &&
      !contains(github.event.head_commit.message, 'chore(release):') &&
      !contains(github.event.head_commit.message, 'Version Packages')
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Debug - Show event info
        run: |
          echo "Commit message: ${{ github.event.head_commit.message }}"
          echo "Author: ${{ github.event.head_commit.author.name }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Dependencies
        run: npm ci

      - name: Check if changesets exist
        id: changesets-check
        run: |
          if [ -n "$(ls -A .changeset/*.md 2>/dev/null | grep -v README.md)" ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Version with changesets (if present)
        if: steps.changesets-check.outputs.has-changesets == 'true'
        run: |
          # Apply changesets to bump version
          npx changeset version
          # Remove changeset files after versioning
          rm -rf .changeset/*.md
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump patch version (if no changesets)
        if: steps.changesets-check.outputs.has-changesets == 'false'
        run: |
          # Bump patch version
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Create beta version
        run: |
          # Convert to beta version
          BETA_VERSION="${NEW_VERSION}-beta.$(date +%s)"
          npm version $BETA_VERSION --no-git-tag-version
          echo "BETA_VERSION=${BETA_VERSION}" >> $GITHUB_ENV

      - name: Build
        run: npm run build

      - name: Publish to npm with beta tag
        run: npm publish --tag beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.BETA_VERSION }}
          release_name: v${{ env.BETA_VERSION }}
          body: |
            ## ðŸš€ Beta Release
            
            This is an automated beta release from commit ${{ github.sha }}
            
            ### Installation
            ```bash
            npm install claude-gwt@beta
            ```
            
            ### Commit
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: true

      - name: Create summary
        run: |
          echo "# ðŸš€ Beta Version Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ“¦ Published Version" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`${{ env.BETA_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: \`beta\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ“¥ Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'npm install claude-gwt@beta' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY