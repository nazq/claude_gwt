name: Release and Publish

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v1.0.0-beta.1

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for changelog generation
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build:clean
      
      - name: Run tests
        run: npm test
      
      - name: Extract version info
        id: version
        run: |
          # Get version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Determine if this is a prerelease
          if [[ "$VERSION" == *"-"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            # Extract prerelease identifier (beta, alpha, rc, etc.)
            NPM_TAG=$(echo $VERSION | sed -E 's/^[0-9]+\.[0-9]+\.[0-9]+-([^.]+).*/\1/')
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            NPM_TAG="latest"
          fi
          echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT
          
          echo "Version: $VERSION"
          echo "Pre-release: $([[ "$VERSION" == *"-"* ]] && echo "Yes" || echo "No")"
          echo "NPM Tag: $NPM_TAG"
      
      - name: Verify package version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.version.outputs.version }}"
          
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Package.json: $PACKAGE_VERSION"
            echo "Git tag: $TAG_VERSION"
            echo ""
            echo "Please ensure package.json version matches the tag."
            exit 1
          fi
          
          echo "✅ Version verified: $PACKAGE_VERSION"
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, including all commits"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Generating changelog from $PREV_TAG to ${{ github.ref_name }}..."
          
          # Generate changelog content
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ github.ref_name }} | \
            grep -E "^- (feat|fix|docs|style|refactor|perf|test|chore|build|ci)(\(.+\))?: .+" || \
            git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ github.ref_name }})
          
          # Group by commit type
          cat > RELEASE_NOTES.md << EOF
          ## What's Changed in ${{ steps.version.outputs.version }}
          
          ### 🚀 Features
          $(echo "$CHANGELOG" | grep -E "^- feat(\(.+\))?: " | sed 's/^- feat(\(.*\))?: /- /' || echo "None")
          
          ### 🐛 Bug Fixes
          $(echo "$CHANGELOG" | grep -E "^- fix(\(.+\))?: " | sed 's/^- fix(\(.*\))?: /- /' || echo "None")
          
          ### 📚 Documentation
          $(echo "$CHANGELOG" | grep -E "^- docs(\(.+\))?: " | sed 's/^- docs(\(.*\))?: /- /' || echo "None")
          
          ### 🔧 Other Changes
          $(echo "$CHANGELOG" | grep -vE "^- (feat|fix|docs)(\(.+\))?: " || echo "None")
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...${{ github.ref_name }}
          EOF
          
          # Output for GitHub Release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm config set access public
      
      - name: Publish to npm
        run: |
          echo "Publishing version ${{ steps.version.outputs.version }} with tag '${{ steps.version.outputs.npm_tag }}'"
          npm publish --tag ${{ steps.version.outputs.npm_tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ steps.version.outputs.prerelease }}
          body: |
            ## 📦 npm Package
            
            This version has been published to npm as `claude-gwt@${{ steps.version.outputs.version }}`
            
            ### Installation
            
            ```bash
            # Install latest stable
            npm install -g claude-gwt@${{ steps.version.outputs.npm_tag }}
            
            # Install this specific version
            npm install -g claude-gwt@${{ steps.version.outputs.version }}
            ```
            
            ### Links
            - 📦 [View on npm](https://www.npmjs.com/package/claude-gwt/v/${{ steps.version.outputs.version }})
            - 📚 [Documentation](https://github.com/${{ github.repository }}#readme)
            
            ---
            
            ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update CHANGELOG.md
        if: steps.version.outputs.prerelease == 'false'
        run: |
          # Prepend to CHANGELOG.md
          cat > CHANGELOG_NEW.md << EOF
          # Changelog

          All notable changes to claude-gwt will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          ## [${{ steps.version.outputs.version }}] - $(date +%Y-%m-%d)

          ${{ steps.changelog.outputs.changelog }}

          EOF
          
          # Append existing changelog (skip header)
          tail -n +7 CHANGELOG.md >> CHANGELOG_NEW.md 2>/dev/null || true
          
          # Replace old changelog
          mv CHANGELOG_NEW.md CHANGELOG.md
          
          # Commit and push
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG.md for ${{ steps.version.outputs.version }} [skip ci]" || true
          git push origin HEAD:main || true
      
      - name: Create summary
        run: |
          echo "# 🎉 Release Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Package Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **npm Tag**: \`${{ steps.version.outputs.npm_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ steps.version.outputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [npm Package](https://www.npmjs.com/package/claude-gwt/v/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📥 Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install -g claude-gwt@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY