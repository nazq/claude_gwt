name: Mutation Testing

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'src/**/*.ts'
      - 'tests/**/*.ts'
      - 'stryker.config.json'
      - '.github/workflows/mutation-testing.yml'
  schedule:
    - cron: '0 2 * * 0' # Weekly on Sunday at 2 AM

jobs:
  mutation-test:
    name: Run Mutation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run mutation tests
        run: npm run test:mutation:quick
        continue-on-error: true

      - name: Upload mutation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-report
          path: reports/mutation/
          retention-days: 30

      - name: Comment PR with mutation score
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to read mutation report (JSON format)
            const jsonReportPath = path.join(process.env.GITHUB_WORKSPACE, 'reports/mutation/mutation.json');
            const htmlReportPath = path.join(process.env.GITHUB_WORKSPACE, 'reports/mutation/index.html');
            let mutationScore = 'Unknown';
            let totalMutants = 'Unknown';
            let killedMutants = 'Unknown';
            
            // Try JSON report first (most reliable)
            if (fs.existsSync(jsonReportPath)) {
              try {
                const report = JSON.parse(fs.readFileSync(jsonReportPath, 'utf8'));
                if (report.files) {
                  // Calculate mutation score from raw mutant data
                  const allMutants = [];
                  Object.values(report.files).forEach(file => {
                    if (file.mutants) {
                      allMutants.push(...file.mutants);
                    }
                  });
                  
                  const killed = allMutants.filter(m => m.status === 'Killed').length;
                  const timeout = allMutants.filter(m => m.status === 'Timeout').length;
                  const survived = allMutants.filter(m => m.status === 'Survived').length;
                  const noCoverage = allMutants.filter(m => m.status === 'NoCoverage').length;
                  const compileError = allMutants.filter(m => m.status === 'CompileError').length;
                  const runtimeError = allMutants.filter(m => m.status === 'RuntimeError').length;
                  
                  const totalDetected = killed + timeout;
                  const totalUndetected = survived + noCoverage;
                  const totalValid = totalDetected + totalUndetected;
                  const totalMutants = totalValid + compileError + runtimeError;
                  
                  if (totalValid > 0) {
                    mutationScore = (totalDetected / totalValid * 100).toFixed(2) + '%';
                    killedMutants = totalDetected;
                    totalMutants = totalValid;
                  }
                }
              } catch (error) {
                console.log('Error parsing JSON report:', error.message);
              }
            }
            
            // Fallback to HTML parsing if JSON not available
            if (mutationScore === 'Unknown' && fs.existsSync(htmlReportPath)) {
              const report = fs.readFileSync(htmlReportPath, 'utf8');
              const scoreMatch = report.match(/mutationScore["\s:]*(\d+\.?\d*)/i);
              if (scoreMatch) {
                mutationScore = parseFloat(scoreMatch[1]).toFixed(2) + '%';
              }
            }
            
            const comment = `## ðŸ§¬ Mutation Testing Report
            
            **Mutation Score**: ${mutationScore}${totalMutants !== 'Unknown' ? ` (${killedMutants}/${totalMutants} mutants killed)` : ''}
            
            [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            > Note: Mutation testing helps identify untested code paths by introducing small changes (mutations) to the code and checking if tests catch them.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });