{
	"$schema": "https://biomejs.dev/schemas/2.1.1/schema.json",
	"vcs": { "enabled": false, "clientKind": "git", "useIgnoreFile": false },
	"files": { "ignoreUnknown": false },
	"formatter": {
		"enabled": true,
		"formatWithErrors": false,
		"indentStyle": "space",
		"indentWidth": 2,
		"lineEnding": "lf",
		"lineWidth": 100,
		"attributePosition": "auto",
		"bracketSameLine": false,
		"bracketSpacing": true,
		"expand": "auto",
		"useEditorconfig": true
	},
	"linter": {
		"enabled": true,
		"rules": {
			"recommended": false,
			"complexity": {
				"noAdjacentSpacesInRegex": "error",
				"noExtraBooleanCast": "error",
				"noUselessCatch": "error",
				"noUselessEscapeInRegex": "error"
			},
			"correctness": {
				"noConstAssign": "error",
				"noConstantCondition": "error",
				"noEmptyCharacterClassInRegex": "error",
				"noEmptyPattern": "error",
				"noGlobalObjectCalls": "error",
				"noInvalidBuiltinInstantiation": "error",
				"noInvalidConstructorSuper": "error",
				"noNonoctalDecimalEscape": "error",
				"noPrecisionLoss": "error",
				"noSelfAssign": "error",
				"noSetterReturn": "error",
				"noSwitchDeclarations": "error",
				"noUndeclaredVariables": "error",
				"noUnreachable": "error",
				"noUnreachableSuper": "error",
				"noUnsafeFinally": "error",
				"noUnsafeOptionalChaining": "error",
				"noUnusedLabels": "error",
				"noUnusedPrivateClassMembers": "error",
				"noUnusedVariables": "error",
				"useIsNan": "error",
				"useValidForDirection": "error",
				"useValidTypeof": "error",
				"useYield": "error"
			},
			"style": { "useBlockStatements": "off" },
			"suspicious": {
				"noAsyncPromiseExecutor": "error",
				"noCatchAssign": "error",
				"noClassAssign": "error",
				"noCompareNegZero": "error",
				"noControlCharactersInRegex": "error",
				"noDebugger": "error",
				"noDuplicateCase": "error",
				"noDuplicateClassMembers": "error",
				"noDuplicateElseIf": "error",
				"noDuplicateObjectKeys": "error",
				"noDuplicateParameters": "error",
				"noEmptyBlockStatements": "error",
				"noFallthroughSwitchClause": "error",
				"noFunctionAssign": "error",
				"noGlobalAssign": "error",
				"noImportAssign": "error",
				"noIrregularWhitespace": "error",
				"noMisleadingCharacterClass": "error",
				"noPrototypeBuiltins": "error",
				"noRedeclare": "error",
				"noShadowRestrictedNames": "error",
				"noSparseArray": "error",
				"noUnsafeNegation": "error",
				"noWith": "error",
				"useGetterReturn": "error"
			}
		}
	},
	"javascript": {
		"formatter": {
			"jsxQuoteStyle": "double",
			"quoteProperties": "asNeeded",
			"trailingCommas": "all",
			"semicolons": "always",
			"arrowParentheses": "always",
			"bracketSameLine": false,
			"quoteStyle": "single",
			"attributePosition": "auto",
			"bracketSpacing": true
		}
	},
	"html": { "formatter": { "selfCloseVoidElements": "always" } },
	"overrides": [
		{
			"includes": ["src/**/*.ts"],
			"javascript": {
				"globals": [
					"clearTimeout",
					"console",
					"setTimeout",
					"Buffer",
					"NodeJS",
					"process"
				]
			},
			"linter": {
				"rules": {
					"complexity": {
						"noBannedTypes": "error",
						"noUselessTypeConstraint": "error",
						"useOptionalChain": "error"
					},
					"correctness": {
						"noPrecisionLoss": "error",
						"noUnusedVariables": "error"
					},
					"style": {
						"noNamespace": "error",
						"useArrayLiterals": "error",
						"useAsConstAssertion": "error",
						"useConst": "error"
					},
					"suspicious": {
						"noConsole": "off",
						"noExplicitAny": "error",
						"noExtraNonNullAssertion": "error",
						"noMisleadingInstantiator": "error",
						"noUnsafeDeclarationMerging": "error",
						"noVar": "error",
						"useAwait": "error"
					}
				}
			}
		},
		{
			"includes": ["tests/**/*.ts"],
			"javascript": {
				"globals": [
					"console",
					"describe",
					"beforeAll",
					"beforeEach",
					"expect",
					"afterAll",
					"it",
					"afterEach",
					"vi",
					"process",
					"Buffer"
				]
			}
		},
		{
			"includes": ["src/core/utils/security.ts", "src/cli/cgwt-program.ts"],
			"linter": {
				"rules": {
					"suspicious": {
						"noControlCharactersInRegex": "off"
					}
				}
			}
		},
		{
			"includes": ["src/core/utils/async.ts"],
			"linter": {
				"rules": {
					"suspicious": {
						"noExplicitAny": "off"
					}
				}
			}
		}
	],
	"assist": {
		"enabled": true,
		"actions": { "source": { "organizeImports": "on" } }
	}
}
